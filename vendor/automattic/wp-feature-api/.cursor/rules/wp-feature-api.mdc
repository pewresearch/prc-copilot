---
description: 
globs: includes/**/*.php,src/**/*.js,src/**/*.ts
alwaysApply: false
---
You are assisting with the WordPress Feature API project, which is a system for exposing server and client-side functionality in WordPress for use in LLMs and agentic systems.

## IMPORTANT WORDPRESS CODING STANDARDS:
1. Follow WordPress PHP coding standards: https://developer.wordpress.org/coding-standards/wordpress-coding-standards/php/
   - Use tabs for indentation, not spaces
   - Use snake_case for function and variable names
   - Use CamelCase for class names
   - Add proper PHPDoc comments for all functions, classes, and methods
   - Use full PHP tags (<?php ?>) not shorthand tags
   - Use single quotes for strings without variables
   - Use braces on the same line for control structures
   - Always use strict comparisons (=== and !==) when possible
   - Avoid assignments in conditionals
   - One space on either side of operators and after functions
   - Opening parenthesis of a multi-line function call must be the last content on the line
   - Use the __DIR__ constant instead of calling dirname(__FILE__)
   - Use `_doing_it_wrong` function

2. Follow WordPress JavaScript coding standards: https://developer.wordpress.org/coding-standards/wordpress-coding-standards/javascript/
   - Use tabs for indentation, not spaces
   - Use camelCase for function and variable names
   - Use PascalCase for class and component names
   - Add JSDoc comments for functions and methods
   - Use single quotes for strings when possible
   - End statements with semicolons
   - One space after control structure keywords

3. NO AUTOLOADING - WordPress core does not use Composer autoloading
   - Files should be manually included using require/include
   - Use require_once for files that must be included
   - Follow WordPress file organization patterns
   - Include paths should use ABSPATH or __DIR__ constants

4. Use WordPress naming conventions:
   - Functions should be prefixed with 'wp_' for core functionality
   - Hooks should follow the pattern: '{action/filter}_{plugin/feature}_{action}'
   - Class names should be prefixed with 'WP_'
   - Global variables should be prefixed appropriately
   - Database table names should use $wpdb->prefix

5. Follow WordPress hook patterns:
   - Use add_action() and add_filter() for extending functionality
   - Create appropriate hooks in your own code to allow for extension
   - Document hooks with @since, @param, and @return tags
   - Use appropriate hook priorities

6. REST API conventions:
   - Follow WP REST API standards for endpoints and responses
   - Use proper namespacing for routes (wp/v2/features)
   - Implement proper authentication and permissions checks
   - Use register_rest_route() for registering endpoints
   - Return WP_REST_Response objects with appropriate status codes

7. Data handling:
   - Sanitize inputs using WordPress sanitization functions (sanitize_*)
   - Validate data with appropriate WordPress validation methods
   - Use prepare_for_database() and prepare_for_js() patterns
   - Use $wpdb->prepare() for SQL queries
   - Escape output with esc_* functions (esc_html, esc_url, etc.)
   - Nonce all form submissions and verify nonces

## PROJECT SPECIFICS:
- The Feature API consists of both server-side (PHP) and client-side (JavaScript) components
- Features are registered as either 'resources' or 'tools'
- The system uses a registry pattern with a singleton WP_Feature_Registry class
- Features should be discoverable and executable across server and client
- The WP REST API is used as the transport layer between client and server
- Features have properties like id, name, description, type, input_schema, output_schema, callback, etc.
- Features can be filtered by categories, permissions, and custom filter callbacks
- The client registry is implemented as a @wordpress/data store

### AVOID:
- Modern PHP features not compatible with WordPress minimum PHP version (7.2)
- External dependencies not already in WordPress core
- Implementing autoloading or dependency injection patterns
- Using namespaces (WordPress core doesn't use them)
- Using arrow functions in PHP
- Using shorthand PHP tags
- Direct database queries when core functions exist
- Hardcoded database table names
- Unescaped output or unsanitized input

When suggesting code, prioritize WordPress compatibility and conventions over modern programming paradigms. The goal is to create code that could eventually be integrated into WordPress core.

/**
 * WordPress Dependencies
 */

import { addAction } from '@wordpress/hooks';
import { useState, useCallback, useEffect } from '@wordpress/element';
import { PluginPrePublishPanel } from '@wordpress/edit-post';
import { useSelect, useDispatch } from '@wordpress/data';
import { __ } from '@wordpress/i18n';
import { store as blockEditorStore } from '@wordpress/block-editor';
import { Button, CheckboxControl } from '@wordpress/components';

interface AIBlock {
	clientId: string;
	name: string;
	metadata: {
		name?: string;
	};
}

// Hacky "global store" until we have time to make a proper @wordpress/data store in prc-copilot.
const setupStopPublishing = () => {
	if (typeof window._prc_copilot_pre_publish_check === 'undefined') {
		console.log('setting up window._prc_copilot_pre_publish_check...');
		window._prc_copilot_pre_publish_check = {
			blocks: [],
			stop: false,
		};
		console.log(
			'window._prc_copilot_pre_publish_check...',
			window._prc_copilot_pre_publish_check
		);
	}
};

const stopPublishing = ({ edits, postId, postType }) => {
	console.log('onPublish', {
		edits,
		postId,
		postType,
	});
	if (!window._prc_copilot_pre_publish_check) {
		return;
	}
	if (
		edits.status === 'publish' &&
		true === window._prc_copilot_pre_publish_check.stop
	) {
		window.alert(
			'✨ PRC Copilot assistance has been detected, so publishing is currently disabled. Your post will be reverted back to a draft. ✨'
		);
		console.warn('Stopping publishing...', edits);
		// Rever the post status back to draft...
		edits.status = 'draft';
	}
};

addAction('prc-platform.onPublish', 'prc-block-library', stopPublishing);

export const AICopilotPrePublishCheck = () => {
	const blocks = useSelect((select) => {
		const { getBlocks } = select(blockEditorStore);
		const allBlocks = getBlocks();

		// Recursively find all blocks with _copilot metadata
		const findAIBlocks = (_blocks: any[]): AIBlock[] => {
			return _blocks.reduce((acc: AIBlock[], block) => {
				if (block.attributes?.metadata?._copilot) {
					acc.push({
						clientId: block.clientId,
						name: block.name,
						metadata: block.attributes.metadata,
					});
				}

				if (block.innerBlocks?.length) {
					acc.push(...findAIBlocks(block.innerBlocks));
				}

				return acc;
			}, []);
		};

		return findAIBlocks(allBlocks);
	}, []);

	const { selectBlock } = useDispatch(blockEditorStore);

	// State to track reviewed blocks
	const [reviewedBlocks, setReviewedBlocks] = useState<Set<string>>(
		new Set()
	);

	// Memoized handler for toggling block review status
	const handleToggleReview = useCallback((clientId: string) => {
		setReviewedBlocks((prev) => {
			const newSet = new Set(prev);
			if (newSet.has(clientId)) {
				newSet.delete(clientId);
			} else {
				newSet.add(clientId);
			}
			return newSet;
		});
	}, []);

	// Check if all blocks have been reviewed
	const allBlocksReviewed =
		blocks.length > 0 &&
		blocks.every((block) => reviewedBlocks.has(block.clientId));

	// Hoist the blocks into _prc_copilot_pre_publish_check
	useEffect(() => {
		if (!blocks.length) {
			return;
		}
		setupStopPublishing();
		window._prc_copilot_pre_publish_check.blocks = blocks;
		window._prc_copilot_pre_publish_check.stop = true !== allBlocksReviewed;
	}, [blocks, allBlocksReviewed]);

	if (!blocks.length) {
		return null;
	}

	return (
		<PluginPrePublishPanel
			title={__('PRC Copilot Editor Review', 'prc-block-library')}
			initialOpen={true}
			icon={false}
		>
			<div className="ai-prepublish-warning">
				<p>
					{__(
						'This post contains content generated by PRC Copilot. Please review the following blocks before publishing:',
						'prc-block-library'
					)}
				</p>
				<div className="review-status" style={{ marginBottom: '1rem' }}>
					<strong>
						{allBlocksReviewed
							? __(
									'✓ All blocks have been reviewed',
									'prc-block-library'
								)
							: __(
									`${reviewedBlocks.size} of ${blocks.length} blocks reviewed`,
									'prc-block-library'
								)}
					</strong>
				</div>
				<ul
					className="ai-blocks-list"
					style={{ listStyle: 'none', padding: 0 }}
				>
					{blocks.map((block) => (
						<li
							key={block.clientId}
							style={{
								display: 'flex',
								alignItems: 'center',
								marginBottom: '0.5rem',
								padding: '0.5rem',
								backgroundColor: reviewedBlocks.has(
									block.clientId
								)
									? '#f0f6fc'
									: 'transparent',
								borderRadius: '4px',
								gap: '10px',
							}}
						>
							<CheckboxControl
								checked={reviewedBlocks.has(block.clientId)}
								onChange={() =>
									handleToggleReview(block.clientId)
								}
								style={{ marginRight: '1rem' }}
							/>
							<Button
								variant="link"
								onClick={() => selectBlock(block.clientId)}
								style={{ flex: 1 }}
							>
								<div>
									<div>
										{block.metadata.name || block.name}
									</div>
									<div
										className="ai-block-client-id"
										style={{
											fontSize: '0.8em',
											color: '#666',
											fontStyle: 'italic',
										}}
									>
										({block.clientId})
									</div>
								</div>
							</Button>
						</li>
					))}
				</ul>
			</div>
		</PluginPrePublishPanel>
	);
};

export default AICopilotPrePublishCheck;
